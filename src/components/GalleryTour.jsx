// üñºÔ∏è GALLERY COMPONENT - –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è Telegram Mini App
// Mobile: –ö–∞—Ä—É—Å–µ–ª—å —Å —Ç–æ—á–∫–∞–º–∏ (–û–î–ù–ê —Ñ–æ—Ç–æ –Ω–∞ —ç–∫—Ä–∞–Ω)
// Desktop: Grid –≥–∞–ª–µ—Ä–µ—è + –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ

import { useState } from 'react';
import { ChevronLeft, ChevronRight, X, Grid3x3 } from 'lucide-react';

export const Gallery = ({ images = [], tourTitle = '', onOpenModal, onOpenGallery }) => {
  const [mobileGalleryIndex, setMobileGalleryIndex] = useState(0);

  // üì± Mobile Gallery Scroll Handler
  const handleMobileGalleryScroll = (e) => {
    const container = e.currentTarget;
    const scrollLeft = container.scrollLeft;
    const containerWidth = container.clientWidth;
    const newIndex = Math.round(scrollLeft / containerWidth);
    setMobileGalleryIndex(newIndex);
  };

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 6 —Ñ–æ—Ç–æ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π –∫–∞—Ä—É—Å–µ–ª–∏
  const mobileImages = images.slice(0, 6);
  
  return (
    <>
      {/* üì± –ú–û–ë–ò–õ–¨–ù–ê–Ø –ö–ê–†–£–°–ï–õ–¨ - –≤–æ –≤—Å—é —à–∏—Ä–∏–Ω—É —ç–∫—Ä–∞–Ω–∞ */}
      <div className="md:hidden">
        <div className="relative">
          {/* –ö–∞—Ä—É—Å–µ–ª—å —Å —Å–≤–∞–π–ø–æ–º */}
          <div 
            className="flex overflow-x-auto snap-x snap-mandatory scrollbar-hide"
            onScroll={handleMobileGalleryScroll}
            style={{ scrollBehavior: 'smooth' }}
            id="mobile-gallery"
          >
            {mobileImages.map((image, index) => (
              <div
                key={index}
                className="flex-shrink-0 w-full snap-center"
                onClick={() => onOpenModal && onOpenModal(image, index)}
              >
                <div className="relative w-full h-[300px] bg-gray-100">
                  <img
                    src={image}
                    alt={`${tourTitle} - —Ñ–æ—Ç–æ ${index + 1}`}
                    className="w-full h-full object-cover cursor-pointer"
                    loading={index === 0 ? 'eager' : 'lazy'}
                  />
                </div>
              </div>
            ))}
          </div>

          {/* –¢–æ—á–∫–∏-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã */}
          <div className="absolute bottom-4 left-0 right-0 flex justify-center gap-2">
            {mobileImages.map((_, index) => (
              <button
                key={index}
                onClick={(e) => {
                  e.stopPropagation();
                  const gallery = document.getElementById('mobile-gallery');
                  if (gallery) {
                    gallery.scrollTo({
                      left: index * gallery.clientWidth,
                      behavior: 'smooth'
                    });
                  }
                }}
                className={`w-2 h-2 rounded-full transition-all duration-300 ${
                  index === mobileGalleryIndex
                    ? 'bg-white w-6'
                    : 'bg-white/60'
                }`}
                aria-label={`–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ñ–æ—Ç–æ ${index + 1}`}
              />
            ))}
          </div>

          {/* –ö–Ω–æ–ø–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ñ–æ—Ç–æ" */}
          {images.length > 1 && (
            <button
              onClick={onOpenGallery}
              className="absolute bottom-4 right-4 bg-white/90 backdrop-blur-sm text-gray-800 px-4 py-2 rounded-full text-sm font-semibold shadow-lg hover:bg-white transition-all duration-300 flex items-center gap-2"
            >
              <Grid3x3 className="w-4 h-4" />
              <span>{images.length} —Ñ–æ—Ç–æ</span>
            </button>
          )}
        </div>
      </div>

      {/* üñ•Ô∏è DESKTOP –ì–ê–õ–ï–†–ï–Ø - Grid */}
      <div className="hidden md:block container mx-auto px-4">
        <div className="grid grid-cols-4 gap-2 rounded-xl overflow-hidden">
          {/* –ì–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ - 2x2 */}
          <div className="col-span-2 row-span-2 relative group cursor-pointer overflow-hidden">
            <img
              src={images[0]}
              alt={`${tourTitle} - –≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ`}
              className="w-full h-full object-cover transition-transform duration-500 group-hover:scale-110"
              onClick={() => onOpenModal && onOpenModal(images[0], 0)}
              loading="eager"
            />
            <div className="absolute inset-0 bg-black/0 group-hover:bg-black/20 transition-colors duration-300" />
          </div>

          {/* –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ - –ø–æ –æ–¥–Ω–æ–º—É */}
          {images.slice(1, 5).map((image, index) => (
            <div
              key={index + 1}
              className="relative group cursor-pointer overflow-hidden aspect-square"
              onClick={() => onOpenModal && onOpenModal(image, index + 1)}
            >
              <img
                src={image}
                alt={`${tourTitle} - —Ñ–æ—Ç–æ ${index + 2}`}
                className="w-full h-full object-cover transition-transform duration-500 group-hover:scale-110"
                loading="lazy"
              />
              <div className="absolute inset-0 bg-black/0 group-hover:bg-black/20 transition-colors duration-300" />
              
              {/* –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ */}
              {index === 3 && images.length > 5 && (
                <div
                  className="absolute inset-0 bg-black/60 flex items-center justify-center cursor-pointer hover:bg-black/70 transition-colors"
                  onClick={(e) => {
                    e.stopPropagation();
                    onOpenGallery && onOpenGallery();
                  }}
                >
                  <div className="text-center text-white">
                    <Grid3x3 className="w-8 h-8 mx-auto mb-2" />
                    <p className="text-xl font-bold">+{images.length - 5}</p>
                    <p className="text-sm">–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ</p>
                  </div>
                </div>
              )}
            </div>
          ))}
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ "–°–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ñ–æ—Ç–æ" –ø–æ–¥ grid */}
        {images.length > 5 && (
          <div className="mt-4 text-center">
            <button
              onClick={onOpenGallery}
              className="bg-gray-100 hover:bg-gray-200 text-gray-800 px-6 py-3 rounded-lg font-semibold transition-colors inline-flex items-center gap-2"
            >
              <Grid3x3 className="w-5 h-5" />
              <span>–°–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ {images.length} —Ñ–æ—Ç–æ</span>
            </button>
          </div>
        )}
      </div>
    </>
  );
};

// üéØ –ü–û–õ–ù–û–≠–ö–†–ê–ù–ù–ê–Ø –ì–ê–õ–ï–†–ï–Ø (Modal)
export const FullScreenGallery = ({ 
  images = [], 
  currentIndex = 0, 
  onClose, 
  onNext, 
  onPrev, 
  tourTitle = '' 
}) => {
  return (
    <div className="fixed inset-0 bg-black/95 z-50 flex items-center justify-center">
      {/* –ó–∞–∫—Ä—ã—Ç—å */}
      <button
        onClick={onClose}
        className="absolute top-4 right-4 text-white bg-black/50 hover:bg-black/70 rounded-full p-3 transition-colors z-10"
        aria-label="–ó–∞–∫—Ä—ã—Ç—å –≥–∞–ª–µ—Ä–µ—é"
      >
        <X className="w-6 h-6" />
      </button>

      {/* –°—á–µ—Ç—á–∏–∫ */}
      <div className="absolute top-4 left-4 text-white bg-black/50 px-4 py-2 rounded-full text-sm font-semibold z-10">
        {currentIndex + 1} / {images.length}
      </div>

      {/* –ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ */}
      <div className="relative w-full h-full flex items-center justify-center p-4">
        <img
          src={images[currentIndex]}
          alt={`${tourTitle} - —Ñ–æ—Ç–æ ${currentIndex + 1}`}
          className="max-w-full max-h-full object-contain"
        />
      </div>

      {/* –°—Ç—Ä–µ–ª–∫–∞ –Ω–∞–∑–∞–¥ */}
      {currentIndex > 0 && (
        <button
          onClick={onPrev}
          className="absolute left-4 top-1/2 -translate-y-1/2 text-white bg-black/50 hover:bg-black/70 rounded-full p-3 transition-colors"
          aria-label="–ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Ñ–æ—Ç–æ"
        >
          <ChevronLeft className="w-8 h-8" />
        </button>
      )}

      {/* –°—Ç—Ä–µ–ª–∫–∞ –≤–ø–µ—Ä–µ–¥ */}
      {currentIndex < images.length - 1 && (
        <button
          onClick={onNext}
          className="absolute right-4 top-1/2 -translate-y-1/2 text-white bg-black/50 hover:bg-black/70 rounded-full p-3 transition-colors"
          aria-label="–°–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ"
        >
          <ChevronRight className="w-8 h-8" />
        </button>
      )}

      {/* Thumbnails (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) */}
      <div className="absolute bottom-4 left-0 right-0 flex justify-center gap-2 px-4 overflow-x-auto">
        {images.slice(0, 10).map((image, index) => (
          <button
            key={index}
            onClick={() => {
              // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Ñ–æ—Ç–æ
            }}
            className={`flex-shrink-0 w-16 h-16 rounded-lg overflow-hidden border-2 transition-all ${
              index === currentIndex
                ? 'border-white scale-110'
                : 'border-transparent opacity-60 hover:opacity-100'
            }`}
          >
            <img
              src={image}
              alt={`–ü—Ä–µ–≤—å—é ${index + 1}`}
              className="w-full h-full object-cover"
            />
          </button>
        ))}
      </div>
    </div>
  );
};
