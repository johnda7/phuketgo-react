import { createDirectus, rest, readItems, readItem, createItem } from '@directus/sdk';

// –¢–∏–ø—ã –¥–ª—è –Ω–∞—à–∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π
export interface Tour {
  id: number;
  slug: string;
  title: string;
  subtitle: string;
  description: string;
  price_adult: number;
  price_child: number;
  price_infant: number;
  currency: string;
  duration: string;
  group_size: string;
  rating: number;
  reviews_count: number;
  category: 'islands' | 'mainland' | 'adventure' | 'cultural';
  tags: string[];
  status: 'published' | 'draft' | 'archived';
  main_image?: string;
  gallery?: string[];
  schedule?: any[];
  included?: string[];
  not_included?: string[];
  what_to_bring?: string[];
  date_created: string;
  date_updated: string;
}

export interface Booking {
  id: number;
  customer_name: string;
  customer_email: string;
  customer_phone: string;
  tour_id: number;
  adults: number;
  children: number;
  infants: number;
  total_price: number;
  status: 'new' | 'confirmed' | 'cancelled';
  date_created: string;
}

// –°—Ö–µ–º–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
type Schema = {
  tours: Tour[];
  bookings: Booking[];
};

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è VITE_DIRECTUS_URL –µ—Å–ª–∏ –µ—Å—Ç—å
const directusUrl = (import.meta as any).env?.VITE_DIRECTUS_URL || 'http://localhost:8055';
export const DIRECTUS_BASE_URL = directusUrl;

export const directus = createDirectus<Schema>(directusUrl).with(rest());

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—É—Ä–∞–º–∏
export const toursApi = {
  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ —Ç—É—Ä—ã
  async getAll() {
    try {
      console.log('üì° Directus API URL:', directusUrl);
      const tours = await directus.request(
        readItems('tours', {
          filter: {
            status: {
              _eq: 'published'
            }
          },
          sort: ['-date_created']
        })
      );
      console.log('üì¶ Directus response:', tours);
      return tours || [];
    } catch (error) {
      console.error('‚ùå Error fetching tours from Directus:', error);
      throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –Ω–∞–≤–µ—Ä—Ö
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Ç—É—Ä –ø–æ slug
  async getBySlug(slug: string) {
    try {
      const tours = await directus.request(
        readItems('tours', {
          filter: {
            slug: {
              _eq: slug
            },
            status: {
              _eq: 'published'
            }
          },
          limit: 1
        })
      );
      return tours[0] || null;
    } catch (error) {
      console.error('Error fetching tour:', error);
      return null;
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Ç—É—Ä –ø–æ ID
  async getById(id: number) {
    try {
      const tour = await directus.request(
        readItem('tours', id)
      );
      return tour;
    } catch (error) {
      console.error('Error fetching tour:', error);
      return null;
    }
  }
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏
export const bookingsApi = {
  // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
  async create(bookingData: Omit<Booking, 'id' | 'date_created'>) {
    try {
      const booking = await directus.request(
        createItem('bookings', bookingData)
      );
      return booking;
    } catch (error) {
      console.error('Error creating booking:', error);
      throw error;
    }
  }
};
